Option Compare Database
Option Explicit

Public Sub DocumenterTousLesEtats()
    On Error GoTo ErreurHandler
    
    Dim db As Database
    Dim objRpt As AccessObject
    Dim rpt As Report
    Dim ctrl As Control
    Dim xlApp As Object, xlWB As Object, xlWS As Object
    Dim ligne As Integer
    Dim cheminFichier As String
    Dim nomFichier As String
    
    ' Vérifier si Excel est disponible
    If Not IsExcelInstalled() Then
        MsgBox "Excel n'est pas installé sur ce système.", vbCritical
        Exit Sub
    End If
    
    ' Initialisation Excel
    Set xlApp = CreateObject("Excel.Application")
    Set xlWB = xlApp.Workbooks.Add
    Set xlWS = xlWB.Sheets(1)
    xlApp.Visible = True
    
    ' Configuration de la feuille Excel
    With xlWS
        .Range("A1").Value = "Nom état"
        .Range("B1").Value = "Section"
        .Range("C1").Value = "Nom contrôle"
        .Range("D1").Value = "Type contrôle"
        .Range("E1").Value = "Source données"
        .Range("F1").Value = "Expression"
        .Range("G1").Value = "Requête source"
        .Range("H1").Value = "Table source"
        .Range("I1").Value = "Format"
        .Range("J1").Value = "Visible"
        .Range("K1").Value = "Libellé"
        .Range("L1").Value = "Description"
        
        ' Mise en forme des en-têtes
        .Rows(1).Font.Bold = True
        .Rows(1).HorizontalAlignment = -4108 ' Centre
    End With
    
    ligne = 2
    Set db = CurrentDb()
    
    ' Parcourir tous les états
    For Each objRpt In CurrentProject.AllReports
        On Error Resume Next
        DoCmd.OpenReport objRpt.Name, acViewDesign, , , acHidden
        If Err.Number <> 0 Then
            Debug.Print "Impossible d'ouvrir l'état: " & objRpt.Name & " - " & Err.Description
            Err.Clear
            GoNextRpt:
        Else
            Set rpt = Reports(objRpt.Name)
            
            ' Parcourir les contrôles de l'état
            For Each ctrl In rpt.Controls
                With xlWS
                    .Cells(ligne, 1).Value = objRpt.Name
                    .Cells(ligne, 2).Value = ObtenirNomSection(ctrl.Section)
                    .Cells(ligne, 3).Value = ctrl.Name
                    .Cells(ligne, 4).Value = TypeName(ctrl)
                    
                    ' Analyser les sources de données selon le type de contrôle
                    Select Case ctrl.ControlType
                    Case acTextBox
                        .Cells(ligne, 5).Value = Nz(ctrl.ControlSource, "")
                        If Nz(ctrl.ControlSource, "") <> "" Then
                            If Left(ctrl.ControlSource, 1) = "=" Then
                                .Cells(ligne, 6).Value = ctrl.ControlSource
                            Else
                                .Cells(ligne, 5).Value = ctrl.ControlSource
                                AnalyserSourceDonnees db, ctrl.ControlSource, xlWS, ligne
                            End If
                        End If
                    Case acComboBox, acListBox
                        .Cells(ligne, 5).Value = Nz(ctrl.RowSource, "")
                        AnalyserSourceDonnees db, ctrl.RowSource, xlWS, ligne
                    Case acLabel
                        .Cells(ligne, 11).Value = Nz(ctrl.Caption, "")
                    Case Else
                        .Cells(ligne, 5).Value = Nz(ctrl.ControlSource, "")
                    End Select
                    
                    ' Propriétés supplémentaires
                    .Cells(ligne, 9).Value = Nz(ctrl.Format, "")
                    .Cells(ligne, 10).Value = ctrl.Visible
                    
                    ligne = ligne + 1
                End With
            Next ctrl
            
            DoCmd.Close acReport, objRpt.Name, acSaveNo
        End If
    Next objRpt
    
    ' Ajuster la mise en forme Excel
    With xlWS
        .Columns("A:L").AutoFit
        .Rows.AutoFit
        
        ' Ajouter un tableau Excel pour faciliter le filtrage
        .ListObjects.Add(xlSrcRange, .Range("A1:L" & (ligne - 1)), , xlYes).Name = "TableauDocumentation"
        .ListObjects("TableauDocumentation").TableStyle = "TableStyleMedium9"
    End With
    
    ' Sauvegarde automatique
    nomFichier = "DocumentationEtats_" & Format(Now(), "yyyy-mm-dd_hhmmss") & ".xlsx"
    cheminFichier = CurrentProject.Path & "\" & nomFichier
    xlWB.SaveAs cheminFichier
    
    ' Fermer Excel
    xlWB.Close True
    xlApp.Quit
    
    MsgBox "Documentation générée avec succès!" & vbCrLf & "Fichier: " & cheminFichier, vbInformation
    
    Nettoyage:
        Set ctrl = Nothing
        Set rpt = Nothing
        Set objRpt = Nothing
        Set db = Nothing
        Set xlWS = Nothing
        Set xlWB = Nothing
        Set xlApp = Nothing
    Exit Sub
    
ErreurHandler:
    MsgBox "Erreur " & Err.Number & ": " & Err.Description, vbCritical
    Resume Nettoyage
End Sub

Private Function ObtenirNomSection(section As Section) As String
    Select Case section
        Case 0: ObtenirNomSection = "Détail"
        Case 1: ObtenirNomSection = "En-tête"
        Case 2: ObtenirNomSection = "Pied de page"
        Case 3: ObtenirNomSection = "En-tête de page"
        Case 4: ObtenirNomSection = "Pied de page"
        Case 5: ObtenirNomSection = "En-tête de groupe"
        Case 6: ObtenirNomSection = "Pied de groupe"
        Case Else: ObtenirNomSection = "Inconnu (" & section & ")"
    End Select
End Function

Private Sub AnalyserSourceDonnees(db As Database, source As String, xlWS As Object, ligne As Integer)
    On Error Resume Next
    
    Dim i As Integer
    Dim qdf As QueryDef
    Dim tdf As TableDef
    Dim sql As String
    Dim nomSource As String
    
    ' Nettoyer la source (enlever les éventuels points-virgules)
    nomSource = Replace(source, ";", "")
    
    ' Vérifier si c'est une requête
    For Each qdf In db.QueryDefs
        If qdf.Name = nomSource Then
            xlWS.Cells(ligne, 7).Value = nomSource
            xlWS.Cells(ligne, 8).Value = ExtraireTablesRequete(qdf.SQL)
            Exit For
        End If
    Next qdf
    
    ' Vérifier si c'est une table
    For Each tdf In db.TableDefs
        If tdf.Name = nomSource And Left(tdf.Name, 4) <> "MSys" Then
            xlWS.Cells(ligne, 8).Value = nomSource
            Exit For
        End If
    Next tdf
    
    ' Vérifier si c'est une expression SQL directe
    If InStr(1, nomSource, "SELECT", vbTextCompare) > 0 Or _
       InStr(1, nomSource, "FROM", vbTextCompare) > 0 Then
        xlWS.Cells(ligne, 8).Value = ExtraireTablesRequete(nomSource)
    End If
End Sub

Private Function ExtraireTablesRequete(sql As String) As String
    Dim mots() As String
    Dim i As Integer
    Dim dansFrom As Boolean
    Dim tables As String
    
    If sql = "" Then Exit Function
    
    ' Normaliser le SQL
    sql = Replace(Replace(sql, vbCrLf, " "), vbTab, " ")
    mots = Split(sql, " ")
    
    dansFrom = False
    For i = LBound(mots) To UBound(mots)
        If UCase(mots(i)) = "FROM" Then
            dansFrom = True
        ElseIf dansFrom And UCase(mots(i)) = "WHERE" Then
            Exit For
        ElseIf dansFrom And UCase(mots(i)) = "ORDER" Then
            Exit For
        ElseIf dansFrom And UCase(mots(i)) = "GROUP" Then
            Exit For
        ElseIf dansFrom And mots(i) <> "" And UCase(mots(i)) <> "INNER" And _
               UCase(mots(i)) <> "LEFT" And UCase(mots(i)) <> "RIGHT" And _
               UCase(mots(i)) <> "JOIN" And UCase(mots(i)) <> "ON" Then
            If InStr(mots(i), ".") > 0 Then
                tables = tables & Split(mots(i), ".")(1) & "; "
            Else
                tables = tables & mots(i) & "; "
            End If
        End If
    Next i
    
    ExtraireTablesRequete = Left(tables, Len(tables) - 2) ' Enlever le dernier "; "
End Function

Private Function IsExcelInstalled() As Boolean
    On Error Resume Next
    Dim xl As Object
    Set xl = CreateObject("Excel.Application")
    If Err.Number = 0 Then
        IsExcelInstalled = True
        xl.Quit
    Else
        IsExcelInstalled = False
    End If
    Set xl = Nothing
End Function

' Fonction pour documenter également les paramètres des états
Public Sub DocumenterParametresEtats()
    On Error GoTo ErreurHandler
    
    Dim db As Database
    Dim objRpt As AccessObject
    Dim rpt As Report
    Dim ctrl As Control
    Dim xlApp As Object, xlWB As Object, xlWS As Object
    Dim ligne As Integer
    Dim cheminFichier As String
    Dim nomFichier As String
    
    ' Initialisation Excel
    Set xlApp = CreateObject("Excel.Application")
    Set xlWB = xlApp.Workbooks.Add
    Set xlWS = xlWB.Sheets(1)
    xlApp.Visible = True
    
    ' Configuration de la feuille Excel
    With xlWS
        .Range("A1").Value = "Nom état"
        .Range("B1").Value = "Paramètre"
        .Range("C1").Value = "Type données"
        .Range("D1").Value = "Valeur par défaut"
        .Range("E1").Value = "Description"
        
        ' Mise en forme des en-têtes
        .Rows(1).Font.Bold = True
        .Rows(1).HorizontalAlignment = -4108 ' Centre
    End With
    
    ligne = 2
    Set db = CurrentDb()
    
    ' Parcourir tous les états
    For Each objRpt In CurrentProject.AllReports
        On Error Resume Next
        
        ' Vérifier si l'état a des paramètres
        If EtatAParametres(objRpt.Name) Then
            .Cells(ligne, 1).Value = objRpt.Name
            .Cells(ligne, 2).Value = "Date de début"
            .Cells(ligne, 3).Value = "Date/Heure"
            .Cells(ligne, 4).Value = "Paramètre utilisateur"
            ligne = ligne + 1
            
            .Cells(ligne, 1).Value = objRpt.Name
            .Cells(ligne, 2).Value = "Date de fin"
            .Cells(ligne, 3).Value = "Date/Heure"
            .Cells(ligne, 4).Value = "Paramètre utilisateur"
            ligne = ligne + 1
        End If
    Next objRpt
    
    ' Ajuster la mise en forme Excel
    With xlWS
        .Columns("A:E").AutoFit
        .Rows.AutoFit
        
        ' Ajouter un tableau Excel
        .ListObjects.Add(xlSrcRange, .Range("A1:E" & (ligne - 1)), , xlYes).Name = "TableauParametres"
        .ListObjects("TableauParametres").TableStyle = "TableStyleMedium9"
    End With
    
    ' Sauvegarde automatique
    nomFichier = "DocumentationParametresEtats_" & Format(Now(), "yyyy-mm-dd_hhmmss") & ".xlsx"
    cheminFichier = CurrentProject.Path & "\" & nomFichier
    xlWB.SaveAs cheminFichier
    
    ' Fermer Excel
    xlWB.Close True
    xlApp.Quit
    
    MsgBox "Documentation des paramètres générée avec succès!" & vbCrLf & "Fichier: " & cheminFichier, vbInformation
    
    Nettoyage:
        Set ctrl = Nothing
        Set rpt = Nothing
        Set objRpt = Nothing
        Set db = Nothing
        Set xlWS = Nothing
        Set xlWB = Nothing
        Set xlApp = Nothing
    Exit Sub
    
ErreurHandler:
    MsgBox "Erreur " & Err.Number & ": " & Err.Description, vbCritical
    Resume Nettoyage
End Sub

Private Function EtatAParametres(nomEtat As String) As Boolean
    ' Cette fonction détecte si un état demande des paramètres à l'ouverture
    ' Méthode simple: vérifier si l'état contient des références à [Date de début] ou [Date de fin]
    On Error Resume Next
    Dim rpt As Report
    Dim hasParams As Boolean
    
    hasParams = False
    
    DoCmd.OpenReport nomEtat, acViewDesign, , , acHidden
    If Err.Number = 0 Then
        Set rpt = Reports(nomEtat)
        
        ' Vérifier le source de l'état
        If InStr(1, rpt.RecordSource, "[Date de début]", vbTextCompare) > 0 Or _
           InStr(1, rpt.RecordSource, "[Date de fin]", vbTextCompare) > 0 Then
            hasParams = True
        Else
            ' Vérifier les contrôles
            Dim ctrl As Control
            For Each ctrl In rpt.Controls
                If InStr(1, Nz(ctrl.ControlSource, ""), "[Date de début]", vbTextCompare) > 0 Or _
                   InStr(1, Nz(ctrl.ControlSource, ""), "[Date de fin]", vbTextCompare) > 0 Then
                    hasParams = True
                    Exit For
                End If
            Next ctrl
        End If
        
        DoCmd.Close acReport, nomEtat, acSaveNo
    End If
    
    EtatAParametres = hasParams
End Function
