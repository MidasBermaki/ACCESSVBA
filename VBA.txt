Option Compare Database
Option Explicit

Public Sub DocumenterEtatsSpecifiques()
    On Error GoTo ErreurHandler
    
    Dim db As Database
    Dim objRpt As AccessObject
    Dim rpt As Report
    Dim ctrl As Control
    Dim xlApp As Object, xlWB As Object, xlWS As Object
    Dim ligne As Integer
    Dim cheminFichier As String
    Dim nomFichier As String
    
    ' Vérifier si Excel est disponible
    If Not IsExcelInstalled() Then
        MsgBox "Excel n'est pas installé sur ce système.", vbCritical
        Exit Sub
    End If
    
    ' Initialisation Excel
    Set xlApp = CreateObject("Excel.Application")
    Set xlWB = xlApp.Workbooks.Add
    Set xlWS = xlWB.Sheets(1)
    xlApp.Visible = True
    
    ' Configuration de la feuille Excel selon le format demandé
    With xlWS
        .Range("A1").Value = "Nom état"
        .Range("B1").Value = "Section"
        .Range("C1").Value = "Nom controle"
        .Range("D1").Value = "Type de selection"
        .Range("E1").Value = "Source controle"
        .Range("F1").Value = "Format de texte"
        .Range("G1").Value = "Cumul"
        .Range("H1").Value = "Requête source"
        
        ' Mise en forme des en-têtes
        .Rows(1).Font.Bold = True
        .Rows(1).HorizontalAlignment = -4108 ' Centre
    End With
    
    ligne = 2
    Set db = CurrentDb()
    
    ' Parcourir tous les états
    For Each objRpt In CurrentProject.AllReports
        On Error Resume Next
        DoCmd.OpenReport objRpt.Name, acViewDesign, , , acHidden
        If Err.Number <> 0 Then
            Debug.Print "Impossible d'ouvrir l'état: " & objRpt.Name & " - " & Err.Description
            Err.Clear
            GoTo NextRpt
        Else
            Set rpt = Reports(objRpt.Name)
            
            ' Parcourir les contrôles de l'état
            For Each ctrl In rpt.Controls
                With xlWS
                    .Range("A" & ligne).Value = objRpt.Name
                    .Range("B" & ligne).Value = ObtenirNomSection(ctrl.Section)
                    .Range("C" & ligne).Value = ctrl.Name
                    .Range("D" & ligne).Value = ObtenirTypeControle(ctrl.ControlType)
                    
                    ' Source du contrôle (comment il est calculé)
                    If Nz(ctrl.ControlSource, "") <> "" Then
                        If Left(ctrl.ControlSource, 1) = "=" Then
                            .Range("E" & ligne).Value = "Calcul: " & ctrl.ControlSource
                        Else
                            .Range("E" & ligne).Value = "Source: " & ctrl.ControlSource
                        End If
                    ElseIf Nz(ctrl.RowSource, "") <> "" Then
                        .Range("E" & ligne).Value = "Liste: " & ctrl.RowSource
                    Else
                        .Range("E" & ligne).Value = "Aucune source"
                    End If
                    
                    ' Format de texte
                    .Range("F" & ligne).Value = Nz(ctrl.Format, "")
                    
                    ' Cumul (pour les zones de texte)
                    If ctrl.ControlType = acTextBox Then
                        .Range("G" & ligne).Value = ObtenirCumul(ctrl)
                    Else
                        .Range("G" & ligne).Value = "N/A"
                    End If
                    
                    ' Requête source
                    If ctrl.ControlType = acComboBox Or ctrl.ControlType = acListBox Then
                        .Range("H" & ligne).Value = Nz(ctrl.RowSource, "")
                    ElseIf Nz(ctrl.ControlSource, "") <> "" And Left(ctrl.ControlSource, 1) <> "=" Then
                        .Range("H" & ligne).Value = ObtenirRequeteSource(db, ctrl.ControlSource)
                    Else
                        .Range("H" & ligne).Value = "N/A"
                    End If
                    
                    ligne = ligne + 1
                End With
            Next ctrl
            
            DoCmd.Close acReport, objRpt.Name, acSaveNo
        End If
        
NextRpt:
    Next objRpt
    
    ' Ajuster la mise en forme Excel
    With xlWS
        .Columns("A:H").AutoFit
        .Rows.AutoFit
        
        ' Ajouter un tableau Excel pour faciliter le filtrage
        Dim tblRange As Object
        Set tblRange = .Range("A1:H" & (ligne - 1))
        .ListObjects.Add(-4154, tblRange, , 1).Name = "TableauDocumentation"
        .ListObjects("TableauDocumentation").TableStyle = "TableStyleMedium9"
    End With
    
    ' Sauvegarde automatique
    nomFichier = "DocumentationEtats_FormatSpecifique_" & Format(Now(), "yyyy-mm-dd_hhmmss") & ".xlsx"
    cheminFichier = CurrentProject.Path & "\" & nomFichier
    xlWB.SaveAs cheminFichier
    
    ' Fermer Excel
    xlWB.Close True
    xlApp.Quit
    
    MsgBox "Documentation générée avec succès!" & vbCrLf & "Fichier: " & cheminFichier, vbInformation
    
Nettoyage:
    Set ctrl = Nothing
    Set rpt = Nothing
    Set objRpt = Nothing
    Set db = Nothing
    Set xlWS = Nothing
    Set xlWB = Nothing
    Set xlApp = Nothing
    Exit Sub
    
ErreurHandler:
    MsgBox "Erreur " & Err.Number & ": " & Err.Description, vbCritical
    Resume Nettoyage
End Sub

Private Function ObtenirNomSection(sectionCode As Integer) As String
    Select Case sectionCode
        Case 0: ObtenirNomSection = "Détail"
        Case 1: ObtenirNomSection = "En-tête"
        Case 2: ObtenirNomSection = "Pied de page"
        Case 3: ObtenirNomSection = "En-tête de page"
        Case 4: ObtenirNomSection = "Pied de page"
        Case 5: ObtenirNomSection = "En-tête de groupe"
        Case 6: ObtenirNomSection = "Pied de groupe"
        Case Else: ObtenirNomSection = "Inconnu (" & sectionCode & ")"
    End Select
End Function

Private Function ObtenirTypeControle(typeControle As Integer) As String
    Select Case typeControle
        Case acTextBox: ObtenirTypeControle = "Zone de texte"
        Case acLabel: ObtenirTypeControle = "Étiquette"
        Case acComboBox: ObtenirTypeControle = "Liste déroulante"
        Case acListBox: ObtenirTypeControle = "Liste"
        Case acCheckBox: ObtenirTypeControle = "Case à cocher"
        Case acOptionGroup: ObtenirTypeControle = "Groupe d'options"
        Case acToggleButton: ObtenirTypeControle = "Bouton bascule"
        Case acOptionButton: ObtenirTypeControle = "Bouton d'option"
        Case acCommandButton: ObtenirTypeControle = "Bouton de commande"
        Case acSubform: ObtenirTypeControle = "Sous-formulaire"
        Case acObjectFrame: ObtenirTypeControle = "Cadre d'objet"
        Case acPageBreak: ObtenirTypeControle = "Saut de page"
        Case acLine: ObtenirTypeControle = "Ligne"
        Case acRectangle: ObtenirTypeControle = "Rectangle"
        Case Else: ObtenirTypeControle = "Autre (" & typeControle & ")"
    End Select
End Function

Private Function ObtenirCumul(ctrl As Control) As String
    On Error Resume Next
    Dim cumulValue As Integer
    
    ' Essayer d'obtenir la propriété RunningSum (Cumul)
    cumulValue = ctrl.Properties("RunningSum")
    
    If Err.Number = 0 Then
        Select Case cumulValue
            Case 0: ObtenirCumul = "Aucun"
            Case 1: ObtenirCumul = "Sur groupe"
            Case 2: ObtenirCumul = "Sur tout"
            Case Else: ObtenirCumul = "Inconnu (" & cumulValue & ")"
        End Select
    Else
        ObtenirCumul = "Non applicable"
        Err.Clear
    End If
End Function

Private Function ObtenirRequeteSource(db As Database, source As String) As String
    On Error Resume Next
    
    Dim qdf As QueryDef
    Dim tdf As TableDef
    Dim nomSource As String
    
    ' Nettoyer la source (enlever les éventuels crochets)
    nomSource = Replace(Replace(source, "[", ""), "]", "")
    
    ' Vérifier si c'est une requête
    For Each qdf In db.QueryDefs
        If qdf.Name = nomSource Then
            ObtenirRequeteSource = "Requête: " & nomSource
            Exit Function
        End If
    Next qdf
    
    ' Vérifier si c'est une table
    For Each tdf In db.TableDefs
        If tdf.Name = nomSource And Left(tdf.Name, 4) <> "MSys" Then
            ObtenirRequeteSource = "Table: " & nomSource
            Exit Function
        End If
    Next tdf
    
    ' Si c'est un champ direct
    ObtenirRequeteSource = "Champ: " & nomSource
End Function

Private Function IsExcelInstalled() As Boolean
    On Error Resume Next
    Dim xl As Object
    Set xl = CreateObject("Excel.Application")
    If Err.Number = 0 Then
        IsExcelInstalled = True
        xl.Quit
    Else
        IsExcelInstalled = False
    End If
    Set xl = Nothing
End Function
