Option Compare Database
Option Explicit

' Structure pour stocker les informations des contrôles
Type ControlInfo
    ControlName As String
    ControlType As String
    ControlSource As String
    RunningSum As String
    Expression As String
    ReferencedFields As String
    Section As String
    Parent As String
End Type

' Structure pour stocker les informations des états
Type ReportInfo
    ReportName As String
    RecordSource As String
    Controls() As ControlInfo
    ControlCount As Integer
End Type

Public Sub AnalyzeAllReports()
    
    On Error GoTo ErrorHandler
    
    Dim db As DAO.Database
    Dim doc As DAO.Document
    Dim rpt As Access.Report
    Dim xlApp As Object
    Dim xlWb As Object
    Dim xlWs As Object
    Dim reports() As ReportInfo
    Dim reportCount As Integer
    Dim i As Integer, j As Integer
    Dim currentRow As Long
    
    ' Initialisation
    Set db = CurrentDb()
    reportCount = 0
    currentRow = 2
    
    ' Création de l'application Excel
    Set xlApp = CreateObject("Excel.Application")
    xlApp.Visible = True
    Set xlWb = xlApp.Workbooks.Add
    Set xlWs = xlWb.Worksheets(1)
    xlWs.Name = "Documentation_Etats"
    
    ' Création des en-têtes
    Call CreateHeaders(xlWs)
    
    ' Parcours de tous les états
    For Each doc In db.Containers("Reports").Documents
        DoEvents ' Permet à Access de traiter les événements
        
        ' Ouvrir l'état en mode Design
        DoCmd.OpenReport doc.Name, acViewDesign
        Set rpt = Reports(doc.Name)
        
        ' Redimensionner le tableau si nécessaire
        reportCount = reportCount + 1
        ReDim Preserve reports(1 To reportCount)
        
        ' Analyser l'état
        Call AnalyzeReport(rpt, reports(reportCount))
        
        ' Fermer l'état
        DoCmd.Close acReport, doc.Name
        
        ' Mettre à jour la barre de progression (optionnel)
        Debug.Print "Analyse de l'état: " & doc.Name & " terminée"
        
    Next doc
    
    ' Écrire les données dans Excel
    For i = 1 To reportCount
        For j = 0 To reports(i).ControlCount - 1
            currentRow = currentRow + 1
            Call WriteToExcel(xlWs, currentRow, reports(i), reports(i).Controls(j))
        Next j
    Next i
    
    ' Formatage final
    Call FormatExcelSheet(xlWs, currentRow)
    
    ' Sauvegarde du fichier
    Dim fileName As String
    fileName = CurrentProject.Path & "\Documentation_Etats_" & Format(Now, "yyyymmdd_hhmmss") & ".xlsx"
    xlWb.SaveAs fileName
    
    MsgBox "Documentation générée avec succès!" & vbCrLf & "Fichier sauvé: " & fileName, vbInformation
    
    Exit Sub
    
ErrorHandler:
    MsgBox "Erreur: " & Err.Description & " (Code: " & Err.Number & ")", vbCritical
    If Not xlApp Is Nothing Then xlApp.Quit
    DoCmd.Close acReport, "", acSaveNo
    
End Sub

Private Sub CreateHeaders(ws As Object)
    
    With ws
        .Cells(1, 1).Value = "Nom de l'État"
        .Cells(1, 2).Value = "Source de Données"
        .Cells(1, 3).Value = "Section"
        .Cells(1, 4).Value = "Nom du Contrôle"
        .Cells(1, 5).Value = "Type de Contrôle"
        .Cells(1, 6).Value = "Source du Contrôle"
        .Cells(1, 7).Value = "Expression/Formule"
        .Cells(1, 8).Value = "Somme Cumulative"
        .Cells(1, 9).Value = "Champs Référencés"
        .Cells(1, 10).Value = "Tables/Requêtes Sources"
        .Cells(1, 11).Value = "Type de Calcul"
        .Cells(1, 12).Value = "Dépendances"
        
        ' Formatage des en-têtes
        With .Range("A1:L1")
            .Font.Bold = True
            .Interior.Color = RGB(79, 129, 189)
            .Font.Color = RGB(255, 255, 255)
            .Borders.LineStyle = 1
        End With
    End With
    
End Sub

Private Sub AnalyzeReport(rpt As Access.Report, ByRef reportInfo As ReportInfo)
    
    Dim ctl As Control
    Dim controlCount As Integer
    Dim sectionName As String
    
    reportInfo.ReportName = rpt.Name
    reportInfo.RecordSource = rpt.RecordSource
    controlCount = 0
    
    ' Analyser tous les contrôles dans toutes les sections
    Call AnalyzeSection(rpt.ReportHeader, "En-tête d'état", reportInfo, controlCount)
    Call AnalyzeSection(rpt.PageHeader, "En-tête de page", reportInfo, controlCount)
    Call AnalyzeSection(rpt.Detail, "Détail", reportInfo, controlCount)
    Call AnalyzeSection(rpt.ReportFooter, "Pied d'état", reportInfo, controlCount)
    Call AnalyzeSection(rpt.PageFooter, "Pied de page", reportInfo, controlCount)
    
    ' Analyser les groupes s'ils existent
    Dim i As Integer
    For i = 0 To rpt.GroupLevel - 1
        Call AnalyzeSection(rpt.GroupHeader(i), "En-tête de groupe " & (i + 1), reportInfo, controlCount)
        Call AnalyzeSection(rpt.GroupFooter(i), "Pied de groupe " & (i + 1), reportInfo, controlCount)
    Next i
    
    reportInfo.ControlCount = controlCount
    
End Sub

Private Sub AnalyzeSection(sect As Section, sectionName As String, ByRef reportInfo As ReportInfo, ByRef controlCount As Integer)
    
    Dim ctl As Control
    
    For Each ctl In sect.Controls
        controlCount = controlCount + 1
        ReDim Preserve reportInfo.Controls(0 To controlCount - 1)
        
        With reportInfo.Controls(controlCount - 1)
            .ControlName = ctl.Name
            .Section = sectionName
            .Parent = reportInfo.ReportName
            
            ' Type de contrôle
            .ControlType = GetControlTypeName(ctl.ControlType)
            
            ' Source du contrôle
            On Error Resume Next
            .ControlSource = ctl.ControlSource
            If Err.Number <> 0 Then .ControlSource = "N/A"
            Err.Clear
            
            ' Somme cumulative
            .RunningSum = GetRunningSumText(ctl)
            
            ' Expression/Formule
            .Expression = ExtractExpression(.ControlSource)
            
            ' Champs référencés
            .ReferencedFields = ExtractReferencedFields(.ControlSource, .Expression)
            On Error GoTo 0
            
        End With
    Next ctl
    
End Sub

Private Function GetControlTypeName(ctlType As Integer) As String
    
    Select Case ctlType
        Case acLabel: GetControlTypeName = "Étiquette"
        Case acTextBox: GetControlTypeName = "Zone de texte"
        Case acComboBox: GetControlTypeName = "Zone de liste déroulante"
        Case acListBox: GetControlTypeName = "Zone de liste"
        Case acCommandButton: GetControlTypeName = "Bouton de commande"
        Case acImage: GetControlTypeName = "Image"
        Case acUnboundObjectFrame: GetControlTypeName = "Cadre d'objet indépendant"
        Case acBoundObjectFrame: GetControlTypeName = "Cadre d'objet dépendant"
        Case acCheckBox: GetControlTypeName = "Case à cocher"
        Case acOptionButton: GetControlTypeName = "Case d'option"
        Case acOptionGroup: GetControlTypeName = "Groupe d'options"
        Case acRectangle: GetControlTypeName = "Rectangle"
        Case acLine: GetControlTypeName = "Ligne"
        Case acSubform: GetControlTypeName = "Sous-formulaire"
        Case acPageBreak: GetControlTypeName = "Saut de page"
        Case acToggleButton: GetControlTypeName = "Bouton bascule"
        Case Else: GetControlTypeName = "Autre (" & ctlType & ")"
    End Select
    
End Function

Private Function GetRunningSumText(ctl As Control) As String
    
    On Error Resume Next
    Select Case ctl.RunningSum
        Case 0: GetRunningSumText = "Non"
        Case 1: GetRunningSumText = "Sur tout"
        Case 2: GetRunningSumText = "Sur groupe"
        Case Else: GetRunningSumText = "N/A"
    End Select
    If Err.Number <> 0 Then GetRunningSumText = "N/A"
    On Error GoTo 0
    
End Function

Private Function ExtractExpression(controlSource As String) As String
    
    If Left(controlSource, 1) = "=" Then
        ExtractExpression = controlSource
    Else
        ExtractExpression = "Champ direct: " & controlSource
    End If
    
End Function

Private Function ExtractReferencedFields(controlSource As String, expression As String) As String
    
    Dim fields As String
    Dim i As Integer
    Dim char As String
    Dim inBrackets As Boolean
    Dim currentField As String
    Dim fieldList As String
    
    If controlSource = "" Or controlSource = "N/A" Then
        ExtractReferencedFields = "Aucun"
        Exit Function
    End If
    
    ' Si c'est une expression (commence par =)
    If Left(controlSource, 1) = "=" Then
        ' Extraire les noms de champs entre crochets [NomChamp]
        For i = 1 To Len(controlSource)
            char = Mid(controlSource, i, 1)
            If char = "[" Then
                inBrackets = True
                currentField = ""
            ElseIf char = "]" And inBrackets Then
                inBrackets = False
                If currentField <> "" Then
                    If fieldList = "" Then
                        fieldList = currentField
                    Else
                        If InStr(fieldList, currentField) = 0 Then
                            fieldList = fieldList & ", " & currentField
                        End If
                    End If
                End If
            ElseIf inBrackets Then
                currentField = currentField & char
            End If
        Next i
        
        If fieldList = "" Then
            ExtractReferencedFields = "Expression complexe"
        Else
            ExtractReferencedFields = fieldList
        End If
    Else
        ExtractReferencedFields = controlSource
    End If
    
End Function

Private Sub WriteToExcel(ws As Object, row As Long, reportInfo As ReportInfo, controlInfo As ControlInfo)
    
    Dim calculationType As String
    Dim dependencies As String
    Dim sourceTables As String
    
    ' Déterminer le type de calcul
    If Left(controlInfo.ControlSource, 1) = "=" Then
        calculationType = "Formule/Expression"
    ElseIf controlInfo.RunningSum <> "Non" Then
        calculationType = "Somme cumulative"
    ElseIf controlInfo.ControlSource <> "N/A" And controlInfo.ControlSource <> "" Then
        calculationType = "Champ direct"
    Else
        calculationType = "Statique/Étiquette"
    End If
    
    ' Analyser les dépendances
    dependencies = AnalyzeDependencies(controlInfo.ControlSource, reportInfo.RecordSource)
    sourceTables = GetSourceTables(reportInfo.RecordSource)
    
    With ws
        .Cells(row, 1).Value = reportInfo.ReportName
        .Cells(row, 2).Value = reportInfo.RecordSource
        .Cells(row, 3).Value = controlInfo.Section
        .Cells(row, 4).Value = controlInfo.ControlName
        .Cells(row, 5).Value = controlInfo.ControlType
        .Cells(row, 6).Value = controlInfo.ControlSource
        .Cells(row, 7).Value = controlInfo.Expression
        .Cells(row, 8).Value = controlInfo.RunningSum
        .Cells(row, 9).Value = controlInfo.ReferencedFields
        .Cells(row, 10).Value = sourceTables
        .Cells(row, 11).Value = calculationType
        .Cells(row, 12).Value = dependencies
    End With
    
End Sub

Private Function AnalyzeDependencies(controlSource As String, recordSource As String) As String
    
    Dim dependencies As String
    
    If Left(controlSource, 1) = "=" Then
        dependencies = "Dépend de: " & ExtractReferencedFields(controlSource, "")
        dependencies = dependencies & " | Source: " & recordSource
    ElseIf controlSource <> "N/A" And controlSource <> "" Then
        dependencies = "Champ direct de: " & recordSource
    Else
        dependencies = "Aucune dépendance"
    End If
    
    AnalyzeDependencies = dependencies
    
End Function

Private Function GetSourceTables(recordSource As String) As String
    
    Dim db As DAO.Database
    Dim qdf As DAO.QueryDef
    Dim tdf As DAO.TableDef
    Dim found As Boolean
    
    Set db = CurrentDb()
    found = False
    
    ' Vérifier si c'est une table
    For Each tdf In db.TableDefs
        If tdf.Name = recordSource Then
            GetSourceTables = "Table: " & recordSource
            found = True
            Exit For
        End If
    Next tdf
    
    ' Vérifier si c'est une requête
    If Not found Then
        For Each qdf In db.QueryDefs
            If qdf.Name = recordSource Then
                GetSourceTables = "Requête: " & recordSource & " | SQL: " & Left(qdf.SQL, 100) & "..."
                found = True
                Exit For
            End If
        Next qdf
    End If
    
    If Not found Then
        GetSourceTables = "Source non identifiée: " & recordSource
    End If
    
End Function

Private Sub FormatExcelSheet(ws As Object, lastRow As Long)
    
    With ws
        ' Ajustement automatique des colonnes
        .Columns.AutoFit
        
        ' Formatage conditionnel pour les types de calculs
        Dim rng As Object
        Set rng = .Range("K2:K" & lastRow)
        
        ' Bordures
        .Range("A1:L" & lastRow).Borders.LineStyle = 1
        
        ' Couleurs alternées
        Dim i As Long
        For i = 2 To lastRow Step 2
            .Range("A" & i & ":L" & i).Interior.Color = RGB(242, 242, 242)
        Next i
        
        ' Figer la première ligne
        .Rows(2).Select
        .Application.ActiveWindow.FreezePanes = True
        .Cells(1, 1).Select
        
        ' Ajouter des filtres
        .Range("A1:L1").AutoFilter
        
    End With
    
End Sub

' Fonction utilitaire pour créer un rapport de synthèse
Public Sub CreateSummaryReport()
    
    Dim xlApp As Object
    Dim xlWb As Object
    Dim xlWs As Object
    
    Set xlApp = CreateObject("Excel.Application")
    xlApp.Visible = True
    Set xlWb = xlApp.Workbooks.Add
    Set xlWs = xlWb.Worksheets(1)
    xlWs.Name = "Synthese_Base_Donnees"
    
    ' Créer un rapport de synthèse de la base de données
    Call CreateDatabaseSummary(xlWs)
    
    Dim fileName As String
    fileName = CurrentProject.Path & "\Synthese_BD_" & Format(Now, "yyyymmdd_hhmmss") & ".xlsx"
    xlWb.SaveAs fileName
    
    MsgBox "Rapport de synthèse créé: " & fileName, vbInformation
    
End Sub

Private Sub CreateDatabaseSummary(ws As Object)
    
    Dim db As DAO.Database
    Dim doc As DAO.Document
    Dim currentRow As Long
    
    Set db = CurrentDb()
    currentRow = 1
    
    ' En-têtes
    ws.Cells(currentRow, 1).Value = "Nom de la Base"
    ws.Cells(currentRow, 2).Value = CurrentProject.Name
    currentRow = currentRow + 2
    
    ' Tables
    ws.Cells(currentRow, 1).Value = "TABLES:"
    ws.Cells(currentRow, 1).Font.Bold = True
    currentRow = currentRow + 1
    
    For Each doc In db.Containers("Tables").Documents
        If Left(doc.Name, 4) <> "MSys" Then
            ws.Cells(currentRow, 2).Value = doc.Name
            currentRow = currentRow + 1
        End If
    Next doc
    
    currentRow = currentRow + 1
    
    ' Requêtes
    ws.Cells(currentRow, 1).Value = "REQUÊTES:"
    ws.Cells(currentRow, 1).Font.Bold = True
    currentRow = currentRow + 1
    
    For Each doc In db.Containers("Queries").Documents
        ws.Cells(currentRow, 2).Value = doc.Name
        currentRow = currentRow + 1
    Next doc
    
    currentRow = currentRow + 1
    
    ' États
    ws.Cells(currentRow, 1).Value = "ÉTATS:"
    ws.Cells(currentRow, 1).Font.Bold = True
    currentRow = currentRow + 1
    
    For Each doc In db.Containers("Reports").Documents
        ws.Cells(currentRow, 2).Value = doc.Name
        currentRow = currentRow + 1
    Next doc
    
End Sub
